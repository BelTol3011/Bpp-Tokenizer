import os

functions = {"main": ["scoreboard objectives add global dummy", "scoreboard objectives add temp dummy"],
             "tick": []}
function = "main"
i = 0
namespace: str
trace = ["main"]
trace_condition_variables = []


def set_minecraft_namespace(name):
    global namespace
    namespace = name


set_minecraft_namespace("nonamespace")


def vars(vars: str):
    return vars.split(" ")


def end():
    functions.update({"start": [f"function {namespace}:main", f"function {namespace}:load"]})
    functions.update({"load": [
        'tellraw @p {"text":"[Run main function]","bold":true,"color":"gold","clickEvent":{"action":"run_command",\
        "value":"/function ' + namespace + ':start"}}']})


def step_in(name):
    if len(name) > 16:
        raise SyntaxError(f"Function name \"{name}\" must be at most 16 letters.")
    global function
    if name not in functions:
        functions.update({name: [f"# function {name}\n"]})
    function = name
    trace.append(function)


def step_out():
    global trace, function
    trace = trace[:-1]
    function = trace[-1]


def generate_function_name(prefix=""):
    global i
    i += 1
    return prefix + str(i)


def sub_int(variable, value):
    functions[function].append(f"# {variable} -= {value}")
    functions[function].append(f"scoreboard players remove {variable} global {value}")


def add_int(variable, value):
    functions[function].append(f"# {variable} += {value}")
    functions[function].append(f"scoreboard players add {variable} global {value}")


def copy(source, destination):
    functions[function].append(f"# {destination} = {source}")
    functions[function].append(f"scoreboard players operation {destination} global = {source} global")


def set_value(variable, value):
    functions[function].append(f"# {variable} = {value}")
    functions[function].append(f"scoreboard players set {variable} global {value}")


def call_function(name):
    functions[function].append(f"# {name}()")
    functions[function].append(f"function {namespace}:{name}")


def while_loop_start(condition_variable):
    functions[function].append(f"# while {condition_variable} start ({len(trace)})")
    name = generate_function_name("while_")
    functions[function].append(
        f"execute if score {condition_variable} global matches 1.. run function {namespace}:{name}")
    step_in(name)
    trace_condition_variables.append(condition_variable)


def while_loop_end():
    global trace_condition_variables
    functions[function].append(f"# while end")
    condition_variable = trace_condition_variables[-1]
    trace_condition_variables = trace_condition_variables[:-1]
    functions[function].append(
        f"execute if score {condition_variable} global matches 1.. run function {namespace}:{function}")
    step_out()


def print_variable(variable):
    functions[function].append(f"# print {variable}")
    functions[function].append(f"tellraw @p {{\"score\":{{\"name\":\"{variable}\",\"objective\":\"global\"}}}}")


def if_start(condition_variable):
    functions[function].append(f"# if {condition_variable} start ({len(trace)})")
    function_name = generate_function_name("if_")
    functions[function].append(
        f"execute if score {condition_variable} global matches 1.. run function {namespace}:{function_name}")
    step_in(function_name)


def if_end():
    step_out()


def for_loop_start():
    raise NotImplemented()


def for_loop_end():
    raise NotImplemented()


def print_str(text=""):
    functions[function].append(f'tellraw @p {{"text":"{text}","color":"white"}}')


def command(command: str):
    functions[function].append(command)


def GET():
    end()
    for function in functions:
        print(f"Function: {function}")
        print("\n".join(functions[function]))
        print()


def _mkdir(path):
    try:
        os.mkdir(path)
    except FileExistsError:
        pass


def EXPORT(path=".", description="Datapack generated by minecraft_utils.py"):
    end()
    os.chdir(path)
    try:
        os.remove("Datapack")
    except Exception as e:
        pass
    _mkdir("Datapack")

    packmcmeta = open("Datapack/pack.mcmeta", "w", encoding="utf-8")
    packmcmeta.write(f"{{\"pack\": {{\"pack_format\": 1, \"description\": \"{description}\"}}}}")
    packmcmeta.close()

    _mkdir("Datapack/data")
    _mkdir("Datapack/data/minecraft/")
    _mkdir("Datapack/data/minecraft/tags/")
    _mkdir("Datapack/data/minecraft/tags/functions")
    file = open("Datapack/data/minecraft/tags/functions}load.json", "w", encoding="ascii")
    file.write(f"{{\"values\": [\"{namespace}:main\", \"{namespace}:load\"]}}")
    file.close()

    file = open("Datapack/data/minecraft/tags/functions/tick.json", "w", encoding="ascii")
    file.write(f"{{\"values\": [\"{namespace}:tick\"]}}")
    file.close()

    _mkdir(f"Datapack/data/{namespace}")
    _mkdir(f"Datapack/data/{namespace}/functions")
    os.chdir(f"Datapack/data/{namespace}/functions")

    for function in functions:
        file = open(function + ".mcfunction", "w", encoding="ascii")
        file.write("\n".join(functions[function]))
        file.close()
